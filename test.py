cycle_arr = []
for i in range(32):
    cycle_arr.append((0, 8 * i, 255 - 8 * i))
for i in range(32):
    cycle_arr.append((8 * i, 255 - 8 * i, 0))
for i in range(32):
    cycle_arr.append((255 - 8 * i, 0, 8 * i))
print(cycle_arr)
cycle_arr = [(0, 0, 255), (0, 16, 239), (0, 32, 223), (0, 48, 207), (0, 64, 191), (0, 80, 175), (0, 96, 159),
             (0, 112, 143), (0, 128, 127), (0, 144, 111), (0, 160, 95), (0, 176, 79), (0, 192, 63), (0, 208, 47),
             (0, 224, 31), (0, 240, 15), (0, 255, 0), (16, 239, 0), (32, 223, 0), (48, 207, 0), (64, 191, 0),
             (80, 175, 0), (96, 159, 0), (112, 143, 0), (128, 127, 0), (144, 111, 0), (160, 95, 0), (176, 79, 0),
             (192, 63, 0), (208, 47, 0), (224, 31, 0), (240, 15, 0), (255, 0, 0), (239, 0, 16), (223, 0, 32),
             (207, 0, 48), (191, 0, 64), (175, 0, 80), (159, 0, 96), (143, 0, 112), (127, 0, 128), (111, 0, 144),
             (95, 0, 160), (79, 0, 176), (63, 0, 192), (47, 0, 208), (31, 0, 224), (15, 0, 240)]

gradient_arr = [(0, 0, 255), (0, 8, 247), (0, 16, 239), (0, 24, 231), (0, 32, 223), (0, 40, 215), (0, 48, 207),
                (0, 56, 199), (0, 64, 191), (0, 72, 183), (0, 80, 175), (0, 88, 167), (0, 96, 159), (0, 104, 151),
                (0, 112, 143), (0, 120, 135), (0, 128, 127), (0, 136, 119), (0, 144, 111), (0, 152, 103), (0, 160, 95),
                (0, 168, 87), (0, 176, 79), (0, 184, 71), (0, 192, 63), (0, 200, 55), (0, 208, 47), (0, 216, 39),
                (0, 224, 31), (0, 232, 23), (0, 240, 15), (0, 248, 7), (0, 255, 0), (8, 247, 0), (16, 239, 0),
                (24, 231, 0), (32, 223, 0), (40, 215, 0), (48, 207, 0), (56, 199, 0), (64, 191, 0), (72, 183, 0),
                (80, 175, 0), (88, 167, 0), (96, 159, 0), (104, 151, 0), (112, 143, 0), (120, 135, 0), (128, 127, 0),
                (136, 119, 0), (144, 111, 0), (152, 103, 0), (160, 95, 0), (168, 87, 0), (176, 79, 0), (184, 71, 0),
                (192, 63, 0), (200, 55, 0), (208, 47, 0), (216, 39, 0), (224, 31, 0), (232, 23, 0), (240, 15, 0),
                (248, 7, 0), (255, 0, 0), (247, 0, 8), (239, 0, 16), (231, 0, 24), (223, 0, 32), (215, 0, 40),
                (207, 0, 48), (199, 0, 56), (191, 0, 64), (183, 0, 72), (175, 0, 80), (167, 0, 88), (159, 0, 96),
                (151, 0, 104), (143, 0, 112), (135, 0, 120), (127, 0, 128), (119, 0, 136), (111, 0, 144), (103, 0, 152),
                (95, 0, 160), (87, 0, 168), (79, 0, 176), (71, 0, 184), (63, 0, 192), (55, 0, 200), (47, 0, 208),
                (39, 0, 216), (31, 0, 224), (23, 0, 232), (15, 0, 240), (7, 0, 248)]
# 指定针脚
EC11_BUTTON = 15
EC11_CLK = 12
EC11_DT = 13
FAN_PWM = 33
LIGHT_PWM = 32

r = RotaryIRQ(pin_num_clk=EC11_CLK,  # 时钟GPIO
              pin_num_dt=EC11_DT,  # 数据GPIO
              min_val=1,  # 最小值
              max_val=100,  # 最大值
              reverse=True,  # 反向增加
              half_step=True,  # 半步模式，体验更流畅
              range_mode=RotaryIRQ.RANGE_BOUNDED)  # _BOUNDED越界截取，_WRAP越界从另一端取值

# 从文本文档读取初始值
f = open('init.txt')
init = f.read().split(',')
r.setValue(int(init[0]))
ex = r.value()
mode = int(init[1])
exmode = mode
button = Pin(EC11_BUTTON, Pin.IN, Pin.PULL_UP)
fan = PWM(Pin(FAN_PWM, Pin.OUT), duty=1, freq=23400)
argb = NeoPixel(Pin(LIGHT_PWM, Pin.OUT), 36)
gradient_status = False
fade_status = False
_thread.start_new_thread(EC11_detect, ())  # 旋钮变化检测
_thread.start_new_thread(button_detect, ())  # RGB切换检测
_thread.start_new_thread(gradient, ())  # 线程：渐变效果
_thread.start_new_thread(fade, ())  # 线程：呼吸效果
_thread.start_new_thread(cycle, ())  # 线程：圆圈效果